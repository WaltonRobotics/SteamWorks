// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2974.Testbed.commands;

import org.usfirst.frc2974.Testbed.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Drive extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public Drive() {

		SmartDashboard.putBoolean("Tank", true);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.drivetrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	public double getLeftThrottle() {
		if (Math.abs(Robot.oi.left.getY()) < 0.3) {
			return 0;
		}
		return Robot.oi.left.getY();
	}

	public double getRightThrottle() {
		if (Math.abs(Robot.oi.right.getY()) < 0.3) {
			return 0;
		}
		return Robot.oi.right.getY();

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if (SmartDashboard.getBoolean("Tank", true)) {
			Robot.drivetrain.setSpeeds(-getLeftThrottle(), -getRightThrottle());
		} else {
			double throttle = (getLeftThrottle() + 1) / 2;
			double forward = getRightThrottle();
			double turn = Robot.oi.right.getX();

			Robot.drivetrain.setSpeeds(throttle * (forward + turn), throttle * (forward - turn));
		}
		if (Robot.oi.shiftDown.get())
			Robot.drivetrain.shiftDown();
		if (Robot.oi.shiftUp.get())
			Robot.drivetrain.shiftUp();

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
